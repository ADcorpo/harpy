// local.properties
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

// key.properties
boolean hasKeyStore = false

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    hasKeyStore = true
} else {
    println "+++"
    println "No keystore defined. The app will not be signed."
    println "+++"
}

// version.properties
def versionProperties = new Properties()
def versionPropertiesFile = rootProject.file('version.properties')
if (versionPropertiesFile.exists()) {
    versionPropertiesFile.withReader('UTF-8') { reader ->
        versionProperties.load(reader)
    }
}

def freeVersionCode = versionProperties.getProperty('freeVersionCode')
def freeVersionName = versionProperties.getProperty('freeVersionName')

def proVersionCode = versionProperties.getProperty('proVersionCode')
def proVersionName = versionProperties.getProperty('proVersionName')

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    flavorDimensions "app"
    productFlavors {
        free {
            applicationId "com.robertodoering.harpy.free"
            versionCode freeVersionCode.toInteger()
            versionName freeVersionName
        }
        pro {
            applicationId "com.robertodoering.harpy.pro"
            versionCode proVersionCode.toInteger()
            versionName proVersionName
        }
    }

    if (hasKeyStore) {
        signingConfigs {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        release {
            if (hasKeyStore) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }

        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

apply plugin: 'com.google.gms.google-services'
